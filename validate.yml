- name: Include additional tasks
  hosts: cfg:shard*:rs:mongos
  become: yes
  tags: 
  - upgrade
  - upgrade:mongodb
  tasks:
      - name: Include additional tasks
        include_tasks: extras.yml 

###############
# Health Check
###############
# We can only proceed if the state is one of the following: PRIMARY, SECONDARY or ARBITER
# If the state is anything other than the above we do not allow the upgrade to start as the replicaset needs to be fixed.
- name: Pre-Upgrade Cluster Health Check
  hosts: cfg:shard*:rs
  any_errors_fatal: true  # This will make the playbook stop on the first failure
  become: yes
  tags: 
    - upgrade
    - upgrade:mongodb
  tasks:
    - name: Obtaining replicaset node states
      shell: >
        mongosh {{ mongo_extra_args | default("") }} -u {{ mongo_root_user }} -p {{ mongo_root_password }} --port {{ mongo_port }} --eval "
        rs.status().members.map((member) => ({state: member.stateStr}));"
      register: rs_status
      delegate_to: "{{ groups[group_names[0]][0] }}" # Delegate this task to run on the first host in each group
      when: postupgrade is not defined 

    - name: Parse replicaset states
      set_fact:
        # we use regex to format the output into a valid json 
        replica_set_states: "{{ rs_status.stdout | regex_replace('state', '\"state\"') | regex_replace(\"'\", '\"') | from_json }}"
      delegate_to: "{{ groups[group_names[0]][0] }}" # Delegate this task to run on the first host in each group
      when: postupgrade is not defined 

    - name: Fail if node state is not PRIMARY, SECONDARY, or ARBITER
      fail:
        msg: "Replica set contains an invalid state: {{ item.state }}"
      when: 
        - item.state not in ['PRIMARY', 'SECONDARY', 'ARBITER']  
        - postupgrade is not defined
      with_items: "{{ replica_set_states }}"
      delegate_to: "{{ groups[group_names[0]][0] }}" # Delegate this task to run on the first host in each group

    - name: Replicaset node states
      debug:
        msg: |
          "{{ rs_status.stdout }}"
      when: inventory_hostname == groups[group_names[0]][0] and arbiter is not defined and postupgrade is not defined # We just need to print the entire output once for each replicaset
      

####################
# Mongod Validation
####################
- name: MongoDB Version Validation
  hosts: cfg:shard*:rs
  any_errors_fatal: true  # This will make the playbook stop on the first failure
  become: yes
  tags: 
    - upgrade
    - upgrade:mongodb
  tasks:
      - name: Check all inventory
        block: 
        - name: Get MongoDB version currently installed
          shell: >
            mongosh {{ mongo_extra_args | default("") }} -u {{ mongo_root_user }} -p {{ mongo_root_password }} --port {{ mongo_port }} --eval "print(db.version().split('-').slice(0, 1).join('-'))"  
          register: mdbVersion   
          when: postupgrade is not defined 

        - name: Register current MongoDB version
          set_fact:
            mongoVersion: "{{ mdbVersion.stdout }}" 
          when: postupgrade is not defined  

        # We need to disable the current repo and enable the new one in order to find out the version of the package that exists in the new repo
        # Once we figure that out we disable it and re-enable the orignal repo
        # This only needs to be done once, since all we want is to check the repo to find out the version
        - name: Get details from MongoDB version being installed 
          shell: |
            percona-release disable {{ original_percona_repository }} >/dev/null
            percona-release enable {{ mongo_release }} >/dev/null
            yum --disablerepo="*" --enablerepo=$(yum repolist | grep psmdb | awk '{print $1}') list available | grep {{ item }} | awk 'NR==1 {print $2}' | awk -F'-' '{print $1}'
            percona-release disable {{ mongo_release }} >/dev/null
            percona-release enable {{ original_percona_repository }} >/dev/null
          register: num_release
          loop: "{{ packages }}"
          when: "'percona-server-mongodb' in item and postupgrade is not defined"
          run_once: true

        - name: Register MongoDB version being installed
          set_fact:
            installVersion: "{{ num_release.results[0].stdout }}"
          run_once: true  
          when: postupgrade is not defined
              
        # We need to perform 2 validations:
        # 1. check if the version being installed is newer than the current version (we can't install an older version over a new version i.e. 5.0 on top of 6.0)
        # 2. check if the new version being installed is only 1 major version greater than the current version. (i.e. we can't install 7.0 on top of 5.0)
        - name: Fail if version being installed is older than the current version or 2 versions newer
          fail:
            msg: "Can not install {{ installVersion }} because the cluster is running MongoDB {{ mongoVersion }}"
          when: (installVersion < mongoVersion) or ((installVersion.split('.')[0] | int) - (mongoVersion.split('.')[0] | int) > 1) and postupgrade is not defined

        - name: Mongod version Check
          debug:
            msg: |
              Current version: {{ mongoVersion }}, version being installed: {{ installVersion }}
          run_once: true   # We got this far so it is ok to proceed. We only need to display this message once. 
          when: postupgrade is not defined


####################
# Mongos Validation
####################
- name: Mongos Version Validation
  hosts: mongos
  any_errors_fatal: true  # This will make the playbook stop on the first failure
  become: yes
  tags: 
    - upgrade
    - upgrade:mongos
  tasks:
      - name: Check all inventory
        block:  
        - name: Get Mongos version currently installed
          shell: >
            mongosh {{ mongo_extra_args | default("") }} -u {{ mongo_root_user }} -p {{ mongo_root_password }} --port {{ mongo_port }} --eval "print(db.version().split('-').slice(0, 1).join('-'))"  
          register: msVersion     
          when: postupgrade is not defined

        - name: Register current Mongos version
          set_fact:
            mongosVersion: "{{ msVersion.stdout }}"  
          when: postupgrade is not defined  

        # We need to disable the current repo and enable the new one in order to find out the version of the package that exists in the new repo
        # Once we figure that out we disable it and re-enable the orignal repo
        - name: Get details from MongoDB version being installed 
          shell: |
            percona-release disable {{ original_percona_repository }} >/dev/null
            percona-release enable {{ mongo_release }} >/dev/null
            yum --disablerepo="*" --enablerepo=$(yum repolist | grep psmdb | awk '{print $1}') list available | grep {{ item }} | awk 'NR==1 {print $2}' | awk -F'-' '{print $1}'
            percona-release disable {{ mongo_release }} >/dev/null
            percona-release enable {{ original_percona_repository }} >/dev/null
          register: num_release_mongos  
          loop: "{{ router_packages }}"
          when: "'percona-server-mongodb-mongos' in item and postupgrade is not defined"
          run_once: true  

        - name: Register Mongos version being installed
          set_fact:
            installMSVersion: "{{ num_release_mongos.results[0].stdout }}"
          run_once: true  
          when: postupgrade is not defined
                   
        # We need to perform 2 validations:
        # 1. check if the version being installed is newer than the current version (we can't install an older version over a new version i.e. 5.0 on top of 6.0)
        # 2. check if the new version being installed is only 1 major version greater than the current version. (i.e. we can't install 7.0 on top of 5.0)
        - name: Fail if version being installed is older than the current version or 2 versions newer
          fail:
            msg: "Can not install {{ installMSVersion }} because the cluster is running MongoDB {{ mongosVersion }}"
          when: (installMSVersion < mongosVersion) or ((installMSVersion.split('.')[0] | int) - (mongosVersion.split('.')[0] | int) > 1) and postupgrade is not defined

        - name: Mongos Version Check
          debug:
            msg: |
              Current version: {{ mongosVersion }}, version being installed: {{ installMSVersion }}
          run_once: true   # We got this far so it is ok to proceed. We only need to display this message once. 
          when: postupgrade is not defined


##########################
# Post Upgrade validation        
##########################
- name: Post-Upgrade Validation
  hosts: cfg:shard*:rs:mongos
  become: yes
  tags: 
    - upgrade
    - upgrade:mongos
    - upgrade:mongod
  tasks:
      - name: Check all inventory
        block:  
        - name: Get Mongos version installed
          shell: >
            mongosh {{ mongo_extra_args | default("") }} -u {{ mongo_root_user }} -p {{ mongo_root_password }} --port {{ mongo_port }} --eval "print(db.version())"  
          register: newmsVersion 
          when: "postupgrade is defined and 'mongos' in group_names"    

        - name: Register Mongos version
          set_fact:
            newmongosVersion: "{{ newmsVersion.stdout }}"
          when: "postupgrade is defined and 'mongos' in group_names"         

        - name: Get MongoDB version installed
          shell: >
            mongosh {{ mongo_extra_args | default("") }} -u {{ mongo_root_user }} -p {{ mongo_root_password }} --port {{ mongo_port }} --eval "print(db.version())"  
          register: newmdbVersion  
          when: "postupgrade is defined and 'mongos' not in group_names"  

        - name: Register MongoDB version
          set_fact:
            newmongoVersion: "{{ newmdbVersion.stdout }}" 
          when: "postupgrade is defined and 'mongos' not in group_names"  

        - name: Mongos version installed
          debug:
            msg: |
              Version installed: {{ newmongosVersion }}
          when: "postupgrade is defined and 'mongos' in group_names"    

        - name: Mongod version installed
          debug:
            msg: |
              Version installed: {{ newmongoVersion }}
          when: "postupgrade is defined and 'mongos' not in group_names"   

        - name: Register FCV 
          set_fact:
            fcv: "{{ newmongoVersion.split('.')[0] + '.' + newmongoVersion.split('.')[1] }} " 
          when: "postupgrade is defined and 'mongos' not in group_names"
          run_once: true # This is just for informational purposes, so we just run from one of the replicaset nodes

        - name: MongoDB Upgrade Complete
          debug:
            msg: |
              The MongoDB cluster has been successfully upgraded.

              Please note the following important considerations:
              - Ensure that all applications are compatible with the newly upgraded MongoDB version.
              - Review the release notes for any deprecated or compatibility changes in features.

              Next Steps:
              1. Verify the functionality of your MongoDB instance by reviewing logs and executing test queries.
              2. Continuously monitor the cluster for any performance issues or warnings.
              3. If necessary, update your application's MongoDB driver to ensure compatibility with the new version.
              4. Run your application's test suite to confirm that all functionalities are working correctly.
              5. Enable backwards-incompatible features (if applicable):
                
              - It is recommended that you allow your deployment to run without enabling these features initially, to ensure a smooth burn-in period 
                and minimize the likelihood of needing to downgrade.
              - Once you are confident that your application and the cluster are functioning as expected, you can enable these features by setting 
                the `setFeatureCompatibilityVersion` as shown below from a Mongos (sharded cluster) or the PRIMARY node (NON sharded cluster):

                db.adminCommand({ setFeatureCompatibilityVersion: '{{ fcv }}', confirm: true })
          when: "postupgrade is defined and 'mongos' not in group_names"
          run_once: true # This is just for informational purposes, so we just run from one of the replicaset nodes



